//@ Header:
//@   [UByte]: x size
//@   [UByte]: y size
//@   [UByte]: x origin
//@   [UByte]: y origin
//@ Data:
//@   [UByte array]: 1 if in range, 0 if not
ALIGN 4
RangeTemplate_Cross:
BYTE 5 5 // Size (1-indexed, so this is a 5x5y array) 
BYTE 2 2 // Center (0-indexed, so [2,2] is the center)
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0
BYTE 1 1 1 1 1
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0


ALIGN 4
RangeTemplate_VerticalLine:
BYTE 5 5 // Size (1-indexed, so this is a 5x5y array) 
BYTE 2 2 // Center (0-indexed, so [2,2] is the center)
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0
BYTE 0 0 1 0 0


ALIGN 4
RangeTemplate_HorizontalLine:
BYTE 5 5 // Size (1-indexed, so this is a 5x5y array) 
BYTE 2 2 // Center (0-indexed, so [2,2] is the center)
BYTE 0 0 0 0 0
BYTE 0 0 0 0 0
BYTE 1 1 1 1 1
BYTE 0 0 0 0 0
BYTE 0 0 0 0 0





ALIGN 4
RangeTemplate_Square:
BYTE 5 5 // Size (1-indexed, so this is a 5x5y array) 
BYTE 2 2 // Center (0-indexed, so [2,2] is the center)
BYTE 0 0 0 0 0
BYTE 0 1 1 1 0
BYTE 0 1 1 1 0
BYTE 0 1 1 1 0
BYTE 0 0 0 0 0

ALIGN 4
RangeTemplate_X:
BYTE 5 5 // Size (1-indexed, so this is a 5x5y array) 
BYTE 2 2 // Center (0-indexed, so [2,2] is the center)
BYTE 1 0 0 0 1
BYTE 0 1 0 1 0
BYTE 0 0 1 0 0
BYTE 0 1 0 1 0
BYTE 1 0 0 0 1


ALIGN 4
RangeTemplate_SmallCross:
BYTE 3 3 // Size (1-indexed, so this is a 5x5y array) 
BYTE 1 1 // Center (0-indexed, so [1,1] is the center)
BYTE 0 1 0 
BYTE 1 1 1 
BYTE 0 1 0 

ALIGN 4
RangeTemplate_SmallX:
BYTE 3 3 // Size (1-indexed, so this is a 5x5y array) 
BYTE 1 1 // Center (0-indexed, so [1,1] is the center)
BYTE 1 0 1
BYTE 0 1 0 
BYTE 1 0 1 



