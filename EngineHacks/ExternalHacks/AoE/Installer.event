// Hooks: $1DA98 and $1D9DC 
// this is to display purple tiles while selecting an area to attack 
// briefly uses a byte in ram at 0x0203F101, which combat arts also use. 
// it should not conflict with combat arts. 

// proc 9A49FC - vuln speed? 

// This hack is required for animations 
// Numbers will display over map battles unless flag BATTLE_MAPANIMATION_NUMBERS_FLAG is on. 
// define BATTLE_MAPANIMATION_NUMBERS_FLAG as desired (default is 0xEE) 
#include "Draw/Installer.event" 



// Install text if you are using FEBuilder. 
#ifdef FEBUILDER_EXTRA_ORG
#include "FEBuilderGBA/EN.event"	//{U}
//#include "FEBuilderGBA/JP.event"	//{J}
#endif // FEBUILDER_EXTRA_ORG

#include "Internals.event"


// Add this to your Unit Menu 
//#define MenuCommand_BPress(name,description,colour,usability,effect, unknown2) "WORD $80d7d94; SHORT name description; BYTE colour $4e; SHORT 0; POIN usability|1; WORD 0; POIN effect|1; POIN 0 0 unknown2|1"
//  MenuCommand_BPress(UM_AoEName, UM_AoEDesc, NormalText, AoE_AreAnyUsable, AoE_Effect, AoE_ClearGraphics)
  
// Text entries:
/*
## UM_AoEName
 AoE[X]

## UM_AoEDesc
Hit multiple units.[X]



## UM_AoEHelp
Select an area to Attack. Press L/R to Rotate.[X]

## UM_AoEHealHelp
Select an area to Heal. Press L/R to Rotate.[X]

## UM_AoEName0
 AoE0[X]

## UM_AoEName1
 AoE1[X]

## UM_AoEName2
 AoE2[X]

## UM_AoEName3
 AoE3[X]

## UM_AoEName4
 AoE4[X]

## UM_AoEName5
 AoE5[X]

## UM_AoEName6
 AoE6[X]

## UM_AoEName7
 AoE7[X]

## UM_AoEName8
 AoE8[X]

## UM_AoEName9
 AoE9[X]
*/

#define HideMoveRangeGraphicsWrapper 0x8022C98	//{U}
//#define HideMoveRangeGraphicsWrapper 0x8022C60	//{J}

	#define MenuCommandID(name,description,colour,ID,usability,effect, unknown1, unknown2) "WORD $80d7d94; SHORT name description; BYTE colour ID; SHORT 0; POIN usability|1; WORD 0; POIN effect|1; POIN 0 unknown1|1 unknown2|1"	//{U}
//	#define MenuCommandID(nameJP,description,colour,ID,usability,effect, unknown1, unknown2) "POIN nameJP; SHORT 0x60C description; BYTE colour ID; SHORT 0; POIN usability|1; WORD 0; POIN effect|1; POIN 0 unknown1|1 unknown2|1"	//{J}

// These are the submenu options that appear:
ALIGN 4
AoEMenuCommandsList: // Specific Commands. Probably want new names for them. 
MenuCommandID(UM_AoEName0, UM_AoEDesc, NormalText, 0x0, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName1, UM_AoEDesc, NormalText, 0x1, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName2, UM_AoEDesc, NormalText, 0x2, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName3, UM_AoEDesc, NormalText, 0x3, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName4, UM_AoEDesc, NormalText, 0x4, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName5, UM_AoEDesc, NormalText, 0x5, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName6, UM_AoEDesc, NormalText, 0x6, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName7, UM_AoEDesc, NormalText, 0x7, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName8, UM_AoEDesc, NormalText, 0x8, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
MenuCommandID(UM_AoEName9, UM_AoEDesc, NormalText, 0x9, AoE_SpecificUsability|1, AoE_SpecificEffect|1, AoE_SpecificHover|1, HideMoveRangeGraphicsWrapper|1)
UM_Separator 

// ASMC Usage:
#define AoE_ASMC(Unit, AoE_ID, RotationID, CoordX, CoordY) "SVAL s1 Unit; SVAL s6 AoE_ID; SVAL s7 RotationID; SVAL sB CoordY<<16|CoordX; ASMC AoE_ASMC"
/*
SVAL s1 (-1) // Unit 
SVAL s6 0 // AoE ID 
SVAL s7 0 // Rotation 
SCOORD sB [10, 11] // Coords 
ASMC AoE_ASMC
*/ 
#define AoE_RotationID_LEFT   0
#define AoE_RotationID_TOP    1
#define AoE_RotationID_RIGHT  2
#define AoE_RotationID_BOTTOM 3


#include "AoE_Exp_Installer.event" 

/*
@ Primary Table structure 
@ Usability Reqs 
UnitByte, #0 
ClassByte, #1 
LevelByte, #2 
ItemByte, #3 
FlagShort, #4 @and 5 
SkillByte, #6 
Pokemblem_MoveTesterByte, #7 // Does nothing if not pokemblem 
@ Config 
HpCostByte, #8
ConfigByte, #9

PowerLowerBoundByte, #10
PowerUpperBoundByte, #11 
MinRangeByte, #12
MaxRangeByte, #13 
RangeMask_IDByte, #14 
Animation_IDByte, #15
DamagePercent, 16 
Status, 17
DebuffID, 18 
EventIndex, 19 
WeaponType, 20 
WEXP_Req, 21 
DepleteItemAmount, 22 
Padding, 23 
*/

// Bitfield for more config options 
#define HealBool 0x01
#define FriendlyFireBool 0x02 
#define FixedDamageBool 0x04 
#define MagBasedBool 0x08 
#define HitResBool 0x10
#define DepleteItemBool 0x20
#define UsableOnlyIfStationaryBool 0x40 
#define KeepHP1NotDieBool 0x80

// Config2 options 
#define UseWepEffectiveness 0x01 
#define UseWepMt 0x02 

ALIGN 4 
AoE_EventsTable:
POIN 0// Index 0 
POIN MyTestEvent // Index 1 
POIN 0 // Index 2 etc. 
WORD 0 



MyTestEvent: 
CUMO (-2) 
STAL 30 
CURE 
NoFade 
ENDA 

ALIGN 4 
AoE_DebuffTable:
WORD 0 
WORD 0x1234567 // Mag, Luk, Res, Def, Spd, Skl, Str 
WORD 0x2345678 

#define Sword 0 
#define Axe 1 
#define Lance 2 

ALIGN 4 
AoE_Table:
// Entry 0
BYTE 0 0 0 0
BYTE 0 0 0 0 // Usable by anyone carrying an IronSword they can wield 
BYTE 0 FriendlyFireBool|DepleteItemBool
BYTE 45 0 // mt, randMt 
BYTE 1 8 // Attack range 
BYTE 0 0x1 // Index of RangeMask, Animation
BYTE 100 0x36 // DamagePercent, Status 
BYTE 1 0 // DebuffID, EventIndex 
BYTE Sword 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 25 // Amount of weapon uses to deplete. 
BYTE UseWepMt|UseWepEffectiveness // Config2 - UseWepEffectiveness 
// Effectiveness short? 
// armor, horse, flier, dragon/wyvern, monster, sword 


// Entry 1
BYTE 0 0 0 Heal 
BYTE 0 0 0 0 // Always usable by anyone who using a Heal staff 
BYTE 0 FriendlyFireBool|MagBasedBool|HealBool
BYTE 10 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 6 0xC // Index of RangeMask, Animation
BYTE 100 0x2F // DamagePercent, Status - for Healing, it restores status. Use 0xFF to fully restore any (except rings) status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 2
BYTE 0 0 0 0 
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 2 2 // Index of RangeMask, AnimationALL,
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 3
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool|MagBasedBool|DepleteItemBool
BYTE 5 0 // mt, randMt 
BYTE 3 7 // Attack range 
BYTE 3 3 // Index of RangeMask, Animation
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 


// Entry 4
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool|MagBasedBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 4 4 // Index of RangeMask, Animation
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 5
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 5 5 // Index of RangeMask, AnimationALL,
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 6
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool|MagBasedBool|DepleteItemBool
BYTE 5 0 // mt, randMt 
BYTE 3 7 // Attack range 
BYTE 6 6 // Index of RangeMask, Animation
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 


// Entry 7
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool|MagBasedBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 7 7 // Index of RangeMask, Animation
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 8
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 8 8 // Index of RangeMask, AnimationALL,
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

// Entry 9
BYTE 0 0 0 0
BYTE 0 0 0 0 // Always usable by anyone 
BYTE 0 FriendlyFireBool
BYTE 5 0 // mt, randMt 
BYTE 0 4 // Attack range 
BYTE 9 9 // Index of RangeMask, AnimationALL,
BYTE 100 0 // DamagePercent, Status 
BYTE 0 0 // DebuffID, EventIndex 
BYTE 0xFF 0 // Weapon Type and WEXP to use this. Eg. All units carrying a D rank+ sword can use 
BYTE 0 0 // Padding 

AoE_TableTerminator




ALIGN 4
AoE_Animation_Table: // 12 bytes per entry 
POIN 0 //AnimationRouine
POIN 0 //EventAddress 
SHORT 0 //Bgm/Sfx 
SHORT 1 // so we don't hide data in febuilder early 

POIN 0 //Entry 1 
POIN AoE_EventAnime1
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry 2
POIN AoE_EventAnime2
SHORT 0 
SHORT 1 

POIN 0 //0x807AD09 // Entry 3 - summon gfx 
POIN AoE_EventAnime3
SHORT 0 
SHORT 1 

POIN 0 //Entry 4
POIN AoE_EventAnime4
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry 5
POIN AoE_EventAnime5
SHORT 0 
SHORT 1 

POIN 0 // Entry 6
POIN AoE_EventAnime6
SHORT 0 
SHORT 1 

POIN 0 //Entry 7
POIN AoE_EventAnime7
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry 8
POIN AoE_EventAnime8
SHORT 0 
SHORT 1 

POIN 0 // Entry 9
POIN AoE_EventAnime9
SHORT 0 
SHORT 1 

POIN 0 // Entry A
POIN AoE_EventAnimeA
SHORT 0 
SHORT 1 

POIN 0 //Entry B 
POIN AoE_EventAnime1_GrantEXP
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry C
POIN AoE_EventAnime2_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 // Entry D
POIN AoE_EventAnime3_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 //Entry E
POIN AoE_EventAnime4_GrantEXP
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry F
POIN AoE_EventAnime5_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 // Entry 10
POIN AoE_EventAnime6_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 //Entry 11
POIN AoE_EventAnime7_GrantEXP
SHORT 0 // Bgm  
SHORT 1 

POIN 0 // Entry 12
POIN AoE_EventAnime8_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 // Entry 13
POIN AoE_EventAnime9_GrantEXP
SHORT 0 
SHORT 1 

POIN 0 // Entry 14
POIN AoE_EventAnimeA_GrantEXP
SHORT 0 
SHORT 1 

WORD 0 0 0 // INDEXED, so no terminator actually needed 


// Note that Memory Slot 3 is used to pass the rotation to the effect. 
// If your animation event overwrites Memory Slot 3, you will get a random rotation. 


ALIGN 4 
AoE_EventAnime1:
SVAL r1 0x1 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime2:
SVAL r1 0x2 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime3:
SVAL r1 0x3 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime4:
SVAL r1 0x4 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime5:
SVAL r1 0x5 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime6:
SVAL r1 0x6 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime7:
SVAL r1 0x7 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime8:
SVAL r1 0x8 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime9:
SVAL r1 0x9 //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnimeA:
SVAL r1 0xA //AnimationID
ASMC ASMC_Draw|1
NoFade
ENDA


ALIGN 4 
AoE_EventAnime1_GrantEXP:
SVAL r1 0x1 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime2_GrantEXP:
SVAL r1 18 //Healing AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime3_GrantEXP:
SVAL r1 0x3 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime4_GrantEXP:
SVAL r1 0x4 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime5_GrantEXP:
SVAL r1 0x5 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime6_GrantEXP:
SVAL r1 0x6 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime7_GrantEXP:
SVAL r1 0x7 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime8_GrantEXP:
SVAL r1 0x8 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnime9_GrantEXP:
SVAL r1 0x9 //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

ALIGN 4 
AoE_EventAnimeA_GrantEXP:
SVAL r1 0xA //AnimationID
ASMC ASMC_Draw|1
ASMC AoE_GrantExp|1
NoFade
ENDA

