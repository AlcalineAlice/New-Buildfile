#define ChapterID ViridianForestNCh
#define GenericA UnitViridianForestNWild
#define GenericB UnitViridianForestNTrainer
#define ClassA ClassViridianForestNWildA
#define ClassB ClassViridianForestNWildB
#define WildLvl 4 
#define TrainerL 1 





EventPointerTable(ChapterID,ThisChapter)



ALIGN 4
ThisChapter:
POIN TurnBasedEvents
POIN CharacterBasedEvents
POIN LocationBasedEvents
POIN MiscBasedEvents
POIN Dunno1 Dunno2 Dunno3 Tutorial
POIN Traps1 Traps2
POIN Units1 Units1  //This unit group determines the number and position of deployment slots when there is a prep screen
POIN $0 $0 $0
POIN $0 $0 $0
POIN BeginningScene EndingScene

TurnBasedEvents:
TurnEventPlayer(0,GlobalTurnEvent,0,255)
TurnEventPlayer(0,ReinforcementEvent,0,255)

END_MAIN

//Reinforce(BushUnitID, NumberOfEnemies, UnitGroup, GracePeriod, FrequencyInTurns)
ReinforcementEvent:
Reinforce(0xF0, 1, ReinforcementUnits, 2, 4) // Se
Reinforce(0xF1, 1, ReinforcementUnits, 4, 3) // Middle 
Reinforce(0xF2, 1, ReinforcementUnits, 6, 3) // W-Mid
NoFade 
ENDA 


CharacterBasedEvents:
CharacterEventBothWays(0,GlobalTalkEvent, 0xFF, Ephraim)
END_MAIN



LocationBasedEvents:

END_MAIN

MiscBasedEvents:
CauseGameOverIfLordDies
AFEV 0 GlobalAfev 0
//AFEV flagID eventOffset activationFlag
//AREA flagID eventOffset [corner1x, corner1y] [corner2x, corner2y]
AFEV 0 RefreshIfNotInDanger 0 
AREA 0 ToRoute2N [4,7] [6,7] 
AREA 0 ToViridianForestS_A [43,32] [44,32] 
AREA 0 ToViridianForestS_B [36,32] [39,32] 
END_MAIN
#ifdef MultiTileMarker_Installer
{ ; MultiTileEntry(ChapterID) 
EscapeTileEntry(43,32) 
EscapeTileEntry(44,32) 
EscapeTileEntry(37,32) 
EscapeTileEntry(38,32) 
EscapeTileEntry(5,7) 
EscapeTileTerminator ; } 
#endif 

ToRoute2N:
ChapterTransition(Route2NCh, 6, 13)

ToViridianForestS_A:
ChapterTransition(ViridianForestSCh, 42, 0)

ToViridianForestS_B:
ChapterTransition(ViridianForestSCh, 36, 0)

// Allocated 2 traps per chapter, in most cases 
// Eg. 2 skill scrolls, 2 TMs, 2 Coin traps, 2 Pokeball traps 
// Traps that do not reference ram do not have this limit 
// Eg. flowers are not obtained once, so you can spam them 
Traps1:
CoinsTrap(36,18,ChapterID*2,450)
CoinsTrap(11,26,(ChapterID*2)+1,400)

//CutBush(4,2)
//RockSmash(3,2)
//StrengthBoulder(4,3)

//RedPokeballTrap(18,25, ChapterID*2, Vulnerary)
//GoldPokeballTrap(14,13, (ChapterID*2)+1, Gust) 

SignBTrap(6,10, ChapterID, 0x0) //no extra text 
SignATrap(44,28, ChapterID, 0x0) // Can use ChapterID as the flagID if only using 1 per chapter 

SkillScrollTrap(44,14, ChapterID*2, TantivyID)
SpellScrollTrap(20,30, (ChapterID*2)+1, AttackPulse)
//OpenPokeball(8,3)
//Sign(8,4, 2)

//Save(10,4)
//SaveCost(43,3) 


BerryTree(23,23,5)
BerryTree(41,21,5)
BerryTree(19,12,5)



ENDTRAP
ALIGN 4


BeginningScene:
CALL GlobalBeginningScene
CALL LoadAndPlacePlayers 


LOAD1 0x1 EnemyUnitsA
ENUN
RandomizeCoords(Grass, Range(0,0,5,5), Range(27,23,32,27)) //se patch 
LOAD1 0x1 EnemyUnitsB
ENUN
RandomizeCoords(Grass, Range(0,0,5,5), Range(27,10,33,20)) //ne 
LOAD1 0x1 EnemyUnitsC
ENUN
RandomizeCoords(Grass, Range(0,0,5,5), Range(19,10,23,20)) //mid e
LOAD1 0x1 EnemyUnitsD
ENUN
RandomizeCoords(Grass, Range(0,0,5,5), Range(11,10,15,24))  //m w
LOAD1 0x1 EnemyUnitsE
ENUN
RandomizeCoords(Grass, Range(0,0,5,5), Range(3,11,7,24))  //w


//OffAllUnitState(0x01FF, WillDropItem, Any, EnemyArmy, AnyClass, AnyRange, AnyItem) //Wilds to not drop items 
AutoLevelUnits(WildLvl, True, 0x508F) // Wilds  

// Count trainer flags asmc ? 

LOAD1 0x1 EnemyTrainersA
ENUN
LOAD1 0x1 EnemyTrainersB
ENUN 


LOAD1 0x1 EnemyTrainersC
ENUN 
LOAD1 0x1 EnemyTrainersD
ENUN 
LOAD1 0x1 EnemyTrainersE
ENUN  

AutoLevelUnits(TrainerL, True, 0x90EF) // Trainers given +5 visible levels 

//FADU 7 
//EVBIT_F 2
//TutText(0x9d5)

CALL GenericAutolevelEvent // Trainers given invisible levels based on difficulty 
// Returns # of trainers on map in rC
BEQ 10 rC r0 
// If trainers exist, do stuff 
//StopHere
//Text(ViridianForestBG,ViridianForestNBirdkeeperText)


LABEL 10 


CALL SetBushHpEvent

LABEL 0x63
NoFade
ENDA



ShopItems:
SHLI Thunder Elfire Nosferatu Divine Mend Physic PureWater Elixir
ALIGN 4

ArmoryItems:
SHLI SteelAxe SteelLance SteelBow SteelSword HandAxe Javelin
ALIGN 4

EndingScene: //Unused but must exist 
NoFade
ENDA

Dunno1:
END_MAIN
Dunno2:
END_MAIN
Dunno3:
END_MAIN
Tutorial:
END_MAIN
Traps2:
ENDTRAP
ALIGN 4

Units1: //only used for a pointless POIN at start 
UNIT Seth  0x7 0x1 0xA1     [0,0] 0b 0x0 0x0 0x0 [0x2,0x3,0x4,0x5] [0x0,0x0,0x0,0x0]
UNIT 

EnemyUnitsA:
//   UnitID  			ClassID    		Comm   Level,Alleg,AutoL  Coords Spec,ItemD,Mons n/a REDAShort	 ItemWord 			AIWord 
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF0 BushID 0x0 Level(5, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsB:
UNIT GenericA ClassA 0x0 Level(2, Enemy, 1)   [0,3] 001b	0x0 0x01 REDA0R3 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

EnemyUnitsC:
UNIT GenericA ClassA 0x0 Level(2, Enemy, 1)   [0,4] 001b	0x0 0x01 REDA0R4 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF2 BushID 0x0 Level(5, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT 

EnemyUnitsD:
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [1,1] 001b	0x0 0x01 REDA1R1 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT 0xF1 BushID 0x0 Level(5, Enemy, 1)   [4,4] 0b	0x0 0x01 REDA4R4 [0x0,0x0,0x0,0x0] BushAI
UNIT

EnemyUnitsE:
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT GenericA ClassA 0x0 Level(1, Enemy, 1)   [1,0] 001b	0x0 0x01 REDA1R0 [0x0,0x0,0x0,0x0] AttackInRangeAI
UNIT

// Leader unit IDs are only for saving which trainers have been beaten or not 
// they range from 0xD0 - 0xDF 
// handled in Patches\TrainerDeathFlags
EnemyTrainersA:
UNIT 0xD0 EkansID 0x0 Level(1, Enemy, 1) [10,28]  DropItem 0x0	0x0 0x00 [PoisonSting,Acid,Gold1000x,0x0] ZoningGroupOneAI
UNIT GenericB PidgeyID 0xD0 Level(1, Enemy, 1) [8,27]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupOneAI
UNIT GenericB SpearowID 0xD0 Level(1, Enemy, 1) [12,27]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupOneAI
UNIT

EnemyTrainersB:
//UNIT 0xD1 MetapodID 0x0 Level(1, Enemy, 1) [5,12]  DropItem 0x0	0x0 REDA5R12 [Headbutt, Guard,Gold500x,0x0] ZoningGroupTwoAI
UNIT 0xD1 MetapodID 0x0 Level(10, Enemy, 1) [15,6]  DropItem 0x0	0x0 0x00 [Headbutt, Guard,Gold500x,0x0] ZoningGroupTwoAI
UNIT GenericB PidgeyID 0xD1 Level(1, Enemy, 1) [16,4]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupTwoAI
UNIT GenericB SpearowID 0xD1 Level(1, Enemy, 1) [17,7]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupTwoAI
UNIT

EnemyTrainersC:
UNIT 0xD2 PikachuID 0x0 Level(1, Enemy, 1) [21,17]  DropItem 0x0	0x0 REDA21R17 [Thundershock, TailWhip,Gold500x,0x0] ZoningGroupThreeAI
UNIT GenericB SpearowID 0xD2 Level(1, Enemy, 1) [22,15]  0b 0x0	0x0 REDA22R15 [0x0,0x0,0x0,0x0] ZoningGroupThreeAI
UNIT GenericB PidgeyID 0xD2 Level(1, Enemy, 1) [20,16]  0b 0x0	0x0 REDA20R16 [0x0,0x0,0x0,0x0] ZoningGroupThreeAI
UNIT

EnemyTrainersD:
UNIT 0xD3 RattataID 0x0 Level(1, Enemy, 1) [31,13]  DropItem 0x0	0x0 REDA32R13 [Tackle, TailWhip,Gold250x,0x0] ZoningGroupFourAI
UNIT GenericB PidgeyID 0xD3 Level(1, Enemy, 1) [30,14]  0b 0x0	0x0 REDA31R14 [0x0,0x0,0x0,0x0] ZoningGroupFourAI
UNIT GenericB SpearowID 0xD3 Level(1, Enemy, 1) [32,14]  0b 0x0	0x0 REDA33R14 [0x0,0x0,0x0,0x0] ZoningGroupFourAI
UNIT

EnemyTrainersE:
UNIT 0xD4 RattataID 0x0 Level(1, Enemy, 1) [39,18]  DropItem 0x0	0x0 0x00 [Tackle, TailWhip,Gold250x,0x0] ZoningGroupFiveAI
UNIT GenericB PidgeyID 0xD4 Level(1, Enemy, 1) [38,19]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupFiveAI
UNIT GenericB SpearowID 0xD4 Level(1, Enemy, 1) [40,17]  0b 0x0	0x0 0x00 [0x0,0x0,0x0,0x0] ZoningGroupFiveAI
UNIT



ReinforcementUnits:
UNIT Reinforcement0 ClassA 0x0 Level(1, Enemy, 1)   [0,0] 001b	0x0 0x01 REDA0R0 [0x0,0x0,0x0,0x0] PursueWithoutHeedAI 
UNIT 



	
#undef GenericA 
#undef GenericB 
#undef ClassA
#undef ClassB
#undef WildLvl
#undef TrainerL
#undef ChapterID